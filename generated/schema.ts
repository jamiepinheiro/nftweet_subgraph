// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Tweet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Tweet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Tweet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Tweet", id.toString(), this);
  }

  static load(id: string): Tweet | null {
    return store.get("Tweet", id) as Tweet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tweetID(): BigInt {
    let value = this.get("tweetID");
    return value.toBigInt();
  }

  set tweetID(value: BigInt) {
    this.set("tweetID", Value.fromBigInt(value));
  }

  get metadataURI(): string {
    let value = this.get("metadataURI");
    return value.toString();
  }

  set metadataURI(value: string) {
    this.set("metadataURI", Value.fromString(value));
  }

  get currentOwnership(): string {
    let value = this.get("currentOwnership");
    return value.toString();
  }

  set currentOwnership(value: string) {
    this.set("currentOwnership", Value.fromString(value));
  }

  get ownerships(): Array<string> {
    let value = this.get("ownerships");
    return value.toStringArray();
  }

  set ownerships(value: Array<string>) {
    this.set("ownerships", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerships(): Array<string> {
    let value = this.get("ownerships");
    return value.toStringArray();
  }

  set ownerships(value: Array<string>) {
    this.set("ownerships", Value.fromStringArray(value));
  }
}

export class Ownership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ownership entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ownership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ownership", id.toString(), this);
  }

  static load(id: string): Ownership | null {
    return store.get("Ownership", id) as Ownership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get tweet(): string {
    let value = this.get("tweet");
    return value.toString();
  }

  set tweet(value: string) {
    this.set("tweet", Value.fromString(value));
  }

  get start(): BigInt {
    let value = this.get("start");
    return value.toBigInt();
  }

  set start(value: BigInt) {
    this.set("start", Value.fromBigInt(value));
  }

  get end(): BigInt | null {
    let value = this.get("end");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set end(value: BigInt | null) {
    if (value === null) {
      this.unset("end");
    } else {
      this.set("end", Value.fromBigInt(value as BigInt));
    }
  }
}
